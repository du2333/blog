/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as EditorRouteImport } from './routes/editor'
import { Route as DbRouteImport } from './routes/db'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostIdRouteImport } from './routes/post.$id'

const EditorRoute = EditorRouteImport.update({
  id: '/editor',
  path: '/editor',
  getParentRoute: () => rootRouteImport,
} as any)
const DbRoute = DbRouteImport.update({
  id: '/db',
  path: '/db',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostIdRoute = PostIdRouteImport.update({
  id: '/post/$id',
  path: '/post/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/db': typeof DbRoute
  '/editor': typeof EditorRoute
  '/post/$id': typeof PostIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/db': typeof DbRoute
  '/editor': typeof EditorRoute
  '/post/$id': typeof PostIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/db': typeof DbRoute
  '/editor': typeof EditorRoute
  '/post/$id': typeof PostIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/db' | '/editor' | '/post/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/db' | '/editor' | '/post/$id'
  id: '__root__' | '/' | '/db' | '/editor' | '/post/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DbRoute: typeof DbRoute
  EditorRoute: typeof EditorRoute
  PostIdRoute: typeof PostIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/editor': {
      id: '/editor'
      path: '/editor'
      fullPath: '/editor'
      preLoaderRoute: typeof EditorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/db': {
      id: '/db'
      path: '/db'
      fullPath: '/db'
      preLoaderRoute: typeof DbRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/post/$id': {
      id: '/post/$id'
      path: '/post/$id'
      fullPath: '/post/$id'
      preLoaderRoute: typeof PostIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DbRoute: DbRoute,
  EditorRoute: EditorRoute,
  PostIdRoute: PostIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
